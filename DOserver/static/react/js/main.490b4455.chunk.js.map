{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["FilterDataField","id","date","console","log","setState","startDate","updateFilterVal","endDate","bind","state","className","style","alignSelf","fontSize","startDatePlaceholderText","endDatePlaceholderText","isOutsideRange","this","startDateId","endDateId","onDatesChange","handleChange","focusedInput","onFocusChange","React","Component","key","newValue","filterText","FilterField","props","event","target","value","type","onChange","e","ArchiveGetter","setTimeout","fd","td","response","file","getDate","slice","getMonth","getFullYear","window","open","Date","dateFormat","selected","showYearDropdown","showMonthDropdown","onClick","downloadDump","ListElem","items","donationsPDay","fetch","then","res","json","result","isLoaded","donations_per_day","error","dateString","parts","split","currentDate","convertDate","filteredItems","filter","item","includes","checkDateFilter","map","index","parentState","string","DonationElem","row","cell","toString","find","i","day_don","rowSpan","Fragment","displayRow","displaySpan","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"js/main.490b4455.chunk.js","sourcesContent":["import React from 'react';\n\nimport DatePicker from \"react-datepicker\";\n\nimport 'react-dates/lib/css/_datepicker.css';\nimport 'react-dates/initialize';\nimport {DateRangePicker, SingleDatePicker, DayPickerRangeController } from 'react-dates';\n\nimport {Tab, TabList, TabPanel, Tabs} from 'react-tabs';\nimport 'react-tabs/style/react-tabs.css';\n\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport './App.css';\n\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            {/*<header className=\"App-header\">*/}\n            {/*<img src={logo} className=\"App-logo\" alt=\"logo\" />*/}\n\n        <Tabs>\n            <TabList>\n                <Tab>List of donations</Tab>\n                <Tab>Download a dump</Tab>\n            </TabList>\n\n            <TabPanel>\n                <section className=\"donations-list\">\n                    <ListElem/>\n                </section>\n                <aside className=\"filter\">\n                    <FilterField/>\n                    <FilterDataField/>\n                </aside>\n            </TabPanel>\n            <TabPanel>\n                <ArchiveGetter/>\n            </TabPanel>\n        </Tabs>\n            {/*</header>*/}\n        </div>\n    )\n}\n\n\nclass FilterDataField extends React.Component{\n    constructor() {\n        super();\n        updateFilterVal = updateFilterVal.bind(this)\n        this.state = {\n            startDate: null,\n            endDate: null\n        };\n    }\n\n\n    handleChange = (id, date) => {\n        console.log(id, date);\n        if(id === \"startDate\"){\n            this.setState({\n                startDate: date\n            });\n            updateFilterVal(\"startDate\", date)\n        }\n        if(id === \"endDate\"){\n            this.setState({\n                endDate: date\n            });\n            updateFilterVal(\"endDate\", date)\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"dateFilter\">\n                <div style={{alignSelf: \"center\"}}>Filtering by date:</div>\n                <DateRangePicker style={{fontSize: \"small\"}}\n                    startDatePlaceholderText=\"start point\"\n                    endDatePlaceholderText=\"end point\"\n                    isOutsideRange={() => false}\n                    startDate={this.state.startDate} // momentPropTypes.momentObj or null,\n                    startDateId=\"your_unique_start_date_id\" // PropTypes.string.isRequired,\n                    endDate={this.state.endDate} // momentPropTypes.momentObj or null,\n                    endDateId=\"your_unique_end_date_id\" // PropTypes.string.isRequired,\n                    onDatesChange={({ startDate, endDate }) => {this.handleChange(\"startDate\", startDate, endDate); this.handleChange(\"endDate\", endDate)}} // PropTypes.func.isRequired,\n                    focusedInput={this.state.focusedInput} // PropTypes.oneOf([START_DATE, END_DATE]) or null,\n                    onFocusChange={focusedInput => this.setState({ focusedInput })} // PropTypes.func.isRequired,\n                />\n            </div>\n        )\n    }\n}\n\n\nfunction updateFilterVal(key, newValue){\n    if(key === \"filterText\")\n        this.setState({filterText: newValue})\n\n    if(key === \"startDate\")\n        this.setState({startDate: newValue})\n\n    if(key === \"endDate\")\n        this.setState({endDate: newValue})\n}\n\n\nclass FilterField extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {filterText: \"\"}\n    }\n\n    handleChange(event) {\n        this.setState({filterText: event.target.value});\n        updateFilterVal(\"filterText\", event.target.value)\n    }\n\n    render() {\n        return (\n            <div>\n                Filter by contents of email and city:\n                <input type=\"text\" value={this.state.filterText} onChange={(e) => this.handleChange(e)}/>\n            </div>\n        );\n    }\n}\n\n\nclass ArchiveGetter extends React.Component{\n\n    downloadDump = () => {\n          // fake server request, getting the file url as response\n        setTimeout(() => {\n            const fd = this.state.startDate\n            const td = this.state.endDate\n            const response = {\n                file: \"/download?from=\"+ (\"0\"+fd.getDate()).slice(-2)+(\"0\"+(fd.getMonth()+1)).slice(-2)+fd.getFullYear() +\n                    \"&to=\"+ (\"0\"+td.getDate()).slice(-2)+(\"0\"+(td.getMonth()+1)).slice(-2)+td.getFullYear(),\n            };\n            // server sent the url to the file!\n            // now, let's download:\n            window.open(response.file);\n            // you could also do:\n            // window.location.href = response.file;\n        }, 100);\n    }\n\n    state = {\n        startDate: new Date(),\n        endDate: new Date()\n    };\n\n    handleChange = (id, date) => {\n        if(id === \"startDate\"){\n            this.setState({\n                startDate: date\n            });\n        }\n        if(id === \"endDate\"){\n            this.setState({\n                endDate: date\n            });\n        }\n    };\n\n    render() {\n        return (\n            <div>\n                Get archive entries by date\n                <br/>\n                From:\n                <DatePicker\n                    dateFormat=\"dd/MM/yyyy\"\n                    selected={this.state.startDate}\n                    onChange={(date) => this.handleChange(\"startDate\", date)}\n                    showYearDropdown\n                    showMonthDropdown\n                />\n                <br/>\n                To:\n                <DatePicker\n                    dateFormat=\"dd/MM/yyyy\"\n                    selected={this.state.endDate}\n                    onChange={(date) => this.handleChange(\"endDate\", date)}\n                    showYearDropdown\n                    showMonthDropdown\n                />\n                <br/>\n                <button onClick={this.downloadDump}>\n                    click me\n                </button>\n            </div>\n        )\n    }\n}\n\n\nclass ListElem extends React.Component {\n    componentDidMount() {\n    fetch(\"/api/getList\"\n    )\n        .then(res => res.json())\n        .then(\n        (result) => {\n            this.setState({\n                isLoaded: true,\n                items: result.items,\n                donationsPDay: result.donations_per_day,\n                filterText: \"\"\n            });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n            this.setState({\n                isLoaded: true,\n                filterText: \"\",\n                error\n            });\n        }\n      )\n    }\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: [[3093, \"15.03.2020\", \"14:43:56\", \"tchurovtim@2gmail.com\", \"Санкт-Петербург\", \"200\"], [2, \"15.03.2020\", \"14:43:56\", \"tchurovtim@gmail.com\", \"Санкт-Петербург\", \"200\"]],\n            donationsPDay: {\"15.03.2020\": {\"donations_that_day\": 2,\n                                           \"sum_that_day\": 400}\n            },\n            filterText: \"\",\n            startDate: \"\",\n            endDate: \"\"\n        }\n        updateFilterVal = updateFilterVal.bind(this)\n    }\n\n    convertDate(dateString) {\n        console.log(\"dateStr\", dateString);\n        var parts = dateString.split('.');\n        return new Date(parts[2], parts[1] - 1, parts[0]);\n    }\n\n    checkDateFilter(currentDate, startDate, endDate){\n        console.log(\"checkDF\", this.convertDate(currentDate), startDate, endDate)\n        return startDate < this.convertDate(currentDate) && this.convertDate(currentDate) < endDate\n    }\n\n    render() {\n        var filteredItems = this.state.items.filter(item => item[1].includes(this.state.filterText) || item[3].includes(this.state.filterText) || item[4].includes(this.state.filterText))\n        // console.log(\"checking\", filteredItems[0][1], this.state.startDate, this.state.endDate)\n        if(this.state.startDate && this.state.endDate) {\n            filteredItems = filteredItems.filter(item => this.checkDateFilter(item[1], this.state.startDate, this.state.endDate))\n        }\n        return (\n            <div>\n                <table>\n                    <tbody>\n                {\n                    filteredItems.map((item, index) => <DonationElem parentState={this.state}\n                                                                    string={item} key={index} />)\n                }\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\n\nclass DonationElem extends React.Component {\n\n    displayRow(row){\n        return row.map((cell) => <td key={this.props.key + cell.toString()}>{cell}</td>)\n    }\n\n\n    displaySpan(row){\n        if(row === this.props.parentState.items.find((i) => i[1] === row[1])){\n            let day_don= this.props.parentState.donationsPDay[row[1]]\n            return <td rowSpan={day_don[\"donations_that_day\"]}>{day_don[\"sum_that_day\"]}</td>;\n        }\n    }\n\n\n    render(){\n        return(\n            <React.Fragment>\n                {<tr key={this.props.key}>{this.displayRow(this.props.string)}\n                    {this.displaySpan(this.props.string)}\n                </tr>}\n            </React.Fragment>\n        );\n    }\n\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}