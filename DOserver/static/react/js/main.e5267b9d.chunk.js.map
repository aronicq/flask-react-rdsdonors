{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ListElem","props","state","items","fetch","then","res","json","result","setState","isLoaded","error","this","map","item","i","string","key","id","React","Component","DonationElem","row","cell","toString","Fragment","displayRow","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qPAgBMA,E,YAwBF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,MACA,CAAC,CAAC,kBAJS,E,iFAvBE,IAAD,OACpBC,MAAM,gBAEDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACD,SAACG,GACG,EAAKC,SAAS,CACdC,UAAU,EACVP,MAAOK,EAAOL,WAMlB,SAACQ,GACG,EAAKF,SAAS,CACVC,UAAU,EACVC,iB,8CAgBR,OACI,6BACI,+BAEIC,KAAKV,MAAMC,MAAMU,KAAI,SAACC,EAAMC,GAAP,OAAa,kBAAC,EAAD,CAAcC,OAAQF,EAAMG,IAAKH,EAAKI,c,GAtCrEC,IAAMC,WA+CvBC,E,mLAESC,GAAK,IAAD,OACX,OAAOA,EAAIT,KAAI,SAACU,GAAD,OAAU,wBAAIN,IAAK,EAAKhB,MAAMgB,IAAMM,EAAKC,YAAaD,Q,+BAIrE,OACI,kBAAC,IAAME,SAAP,KACK,wBAAIR,IAAKL,KAAKX,MAAMgB,KAAML,KAAKc,WAAWd,KAAKX,MAAMe,c,GAT3CG,IAAMC,WAiBlBO,EA5Ef,WACI,OACI,yBAAKC,UAAU,OACX,4BAAQA,UAAU,cAEd,kBAAC,EAAD,SCGIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCgDNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDiE3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,MAAK,SAAAoC,GACjCA,EAAaC,iB","file":"js/main.e5267b9d.chunk.js","sourcesContent":["import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n            {/*<img src={logo} className=\"App-logo\" alt=\"logo\" />*/}\n                <ListElem />\n            </header>\n        </div>\n    );\n}\n\n\nclass ListElem extends React.Component {\n    componentDidMount() {\n    fetch(\"/api/getList\"\n    )\n        .then(res => res.json())\n        .then(\n        (result) => {\n            this.setState({\n            isLoaded: true,\n            items: result.items\n            });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n            this.setState({\n                isLoaded: true,\n                error\n            });\n        }\n      )\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: // [[3093, \"15.03.2020\", \"14:43:56\", \"tchurovtim@gmail.com\", \"Санкт-Петербург\", \"200\"], [2, \"15.03.2020\", \"14:43:56\", \"tchurovtim@gmail.com\", \"Санкт-Петербург\", \"200\"]]\n            [[\"initial item\"]]\n        }\n    }\n\n\n    render() {\n        return (\n            <div>\n                <table>\n                {\n                    this.state.items.map((item, i) => <DonationElem string={item} key={item.id} />)\n                }\n                </table>\n            </div>\n        );\n    }\n}\n\n\nclass DonationElem extends React.Component {\n\n    displayRow(row){\n        return row.map((cell) => <td key={this.props.key + cell.toString()}>{cell}</td>)\n    }\n\n    render(){\n        return(\n            <React.Fragment>\n                {<tr key={this.props.key}>{this.displayRow(this.props.string)}</tr>}\n            </React.Fragment>\n        );\n    }\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//\n// class DynamicSearch extends React.Component {\n//   render() {\n//\n//     var countries = this.props.items;\n//     var searchString = this.state.searchString.trim().toLowerCase();\n//\n//     // filter countries list by value from input box\n//     if(searchString.length > 0){\n//       countries = countries.filter(function(country){\n//         return country.name.toLowerCase().match( searchString );\n//       });\n//     }\n//\n//     return (\n//       <div>\n//         <input type=\"text\" value={this.state.searchString} onChange={this.handleChange} placeholder=\"Search!\" />\n//         <ul>\n//           {\n//             countries.map((country, index) => {\n//               return <li key={index}>{country.name} </li>\n//             }) }\n//         </ul>\n//       </div>\n//     )\n//   }\n//\n//\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       searchString: \"\"\n//     }\n//\n//     this.handleChange = this.handleChange.bind(this);\n//   }\n//\n//   // sets state, triggers render method\n//   handleChange(e){\n//     // grab value form input box\n//     this.setState({searchString: e.target.value});\n//     console.log(\"scope updated!\");\n//   }\n// }\n//\n// // list of countries, defined with JavaScript object literals\n// var countries = [\n//   {\"name\": \"Sweden\"}, {\"name\": \"China\"}, {\"name\": \"Peru\"}, {\"name\": \"Czech Republic\"},\n//   {\"name\": \"Bolivia\"}, {\"name\": \"Latvia\"}, {\"name\": \"Samoa\"}, {\"name\": \"Armenia\"},\n//   {\"name\": \"Greenland\"}, {\"name\": \"Cuba\"}, {\"name\": \"Western Sahara\"}, {\"name\": \"Ethiopia\"},\n//   {\"name\": \"Malaysia\"}, {\"name\": \"Argentina\"}, {\"name\": \"Uganda\"}, {\"name\": \"Chile\"},\n//   {\"name\": \"Aruba\"}, {\"name\": \"Japan\"}, {\"name\": \"Trinidad and Tobago\"}, {\"name\": \"Italy\"},\n//   {\"name\": \"Cambodia\"}, {\"name\": \"Iceland\"}, {\"name\": \"Dominican Republic\"}, {\"name\": \"Turkey\"},\n//   {\"name\": \"Spain\"}, {\"name\": \"Poland\"}, {\"name\": \"Haiti\"}\n// ];\n//\n// ReactDOM.render(\n//   <DynamicSearch items={ countries } />,\n//   document.getElementById('root')\n// );\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}