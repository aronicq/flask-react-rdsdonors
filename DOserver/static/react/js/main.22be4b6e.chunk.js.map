{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ArchiveGetter","downloadDump","setTimeout","fd","state","fromDate","td","toDate","response","file","getDate","slice","getMonth","getFullYear","window","open","Date","handleChange","id","date","setState","console","log","this","dateFormat","selected","onChange","onClick","React","Component","ListElem","props","items","donationsPDay","fetch","then","res","json","result","isLoaded","donations_per_day","error","map","item","i","parentState","string","key","DonationElem","row","cell","toString","find","day_don","rowSpan","Fragment","displayRow","displaySpan","App","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"js/main.22be4b6e.chunk.js","sourcesContent":["import React from 'react';\nimport DatePicker from \"react-datepicker\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport './App.css';\n\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            {/*<header className=\"App-header\">*/}\n            {/*<img src={logo} className=\"App-logo\" alt=\"logo\" />*/}\n                <ArchiveGetter/>\n                <br/>\n                <ListElem/>\n            {/*</header>*/}\n        </div>\n    )\n}\n\nclass ArchiveGetter extends React.Component{\n\n    downloadDump = () => {\n          // fake server request, getting the file url as response\n        setTimeout(() => {\n            const fd = this.state.fromDate\n            const td = this.state.toDate\n            const response = {\n                file: \"/download?from=\"+ (\"0\"+fd.getDate()).slice(-2)+(\"0\"+(fd.getMonth()+1)).slice(-2)+fd.getFullYear() +\n                    \"&to=\"+ (\"0\"+td.getDate()).slice(-2)+(\"0\"+(td.getMonth()+1)).slice(-2)+td.getFullYear(),\n            };\n            // server sent the url to the file!\n            // now, let's download:\n            window.open(response.file);\n            // you could also do:\n            // window.location.href = response.file;\n        }, 100);\n    }\n\n    state = {\n        fromDate: new Date(),\n        toDate: new Date()\n    };\n\n    handleChange = (id, date) => {\n        if(id === \"fromDate\"){\n            this.setState({\n                fromDate: date\n            });\n        }\n        if(id === \"toDate\"){\n            this.setState({\n                toDate: date\n            });\n        }\n    };\n\n    render() {\n        console.log(this.state);\n        return (\n            <div>\n                <DatePicker\n                    dateFormat=\"dd/MM/yyyy\"\n                    selected={this.state.fromDate}\n                    onChange={(date) => this.handleChange(\"fromDate\", date)}\n                />\n                <DatePicker\n                    dateFormat=\"dd/MM/yyyy\"\n                    selected={this.state.toDate}\n                    onChange={(date) => this.handleChange(\"toDate\", date)}\n                />\n                <br/>\n                <button onClick={this.downloadDump}>\n                    click me\n                </button>\n            </div>\n        )\n    }\n}\n\n\nclass ListElem extends React.Component {\n    componentDidMount() {\n    fetch(\"/api/getList\"\n    )\n        .then(res => res.json())\n        .then(\n        (result) => {\n            this.setState({\n            isLoaded: true,\n            items: result.items,\n            donationsPDay: result.donations_per_day\n            });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n            this.setState({\n                isLoaded: true,\n                error\n            });\n        }\n      )\n    }\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: [[3093, \"15.03.2020\", \"14:43:56\", \"tchurovtim@gmail.com\", \"Санкт-Петербург\", \"200\"], [2, \"15.03.2020\", \"14:43:56\", \"tchurovtim@gmail.com\", \"Санкт-Петербург\", \"200\"]],\n            // [[\"initial item\"]]\n            donationsPDay: {\"15.03.2020\": {\"donations_that_day\": 2,\n                                           \"sum_that_day\": 400}\n            }\n        }\n    }\n\n\n    render() {\n        // console.log(this.state.items)\n        return (\n            <div>\n                <table>\n                    <tbody>\n                {\n                    this.state.items.map((item, i) => <DonationElem parentState={this.state} string={item} key={item.id} />)\n                }\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\n\nclass DonationElem extends React.Component {\n\n    displayRow(row){\n        return row.map((cell) => <td key={this.props.key + cell.toString()}>{cell}</td>)\n    }\n\n\n    displaySpan(row){\n        if(row === this.props.parentState.items.find((i) => i[1] === row[1])){\n            let day_don= this.props.parentState.donationsPDay[row[1]]\n            return <td rowSpan={day_don[\"donations_that_day\"]}>{day_don[\"sum_that_day\"]}</td>;\n        }\n    }\n\n\n    render(){\n        return(\n            <React.Fragment>\n                {<tr key={this.props.key}>{this.displayRow(this.props.string)}\n                    {this.displaySpan(this.props.string)}\n                </tr>}\n            </React.Fragment>\n        );\n    }\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}