{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ListElem","props","state","items","donationsPDay","fetch","then","res","json","result","setState","isLoaded","donations_per_day","error","console","log","this","map","item","i","parentState","string","key","id","React","Component","DonationElem","row","cell","toString","find","day_don","rowSpan","Fragment","displayRow","displaySpan","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qPAeMA,E,YAyBF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,MAAO,CAAC,CAAC,KAAM,aAAc,WAAY,uBAAwB,wFAAmB,OAAQ,CAAC,EAAG,aAAc,WAAY,uBAAwB,wFAAmB,QAErKC,cAAe,CAAC,aAAc,CAAC,mBAAsB,EACtB,aAAgB,OANpC,E,iFAxBE,IAAD,OACpBC,MAAM,gBAEDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACD,SAACG,GACG,EAAKC,SAAS,CACdC,UAAU,EACVR,MAAOM,EAAON,MACdC,cAAeK,EAAOG,uBAM1B,SAACC,GACG,EAAKH,SAAS,CACVC,UAAU,EACVE,iB,8CAkBF,IAAD,OAEL,OADAC,QAAQC,IAAIC,KAAKd,MAAMC,OAEnB,6BACI,+BAEIa,KAAKd,MAAMC,MAAMc,KAAI,SAACC,EAAMC,GAAP,OAAa,kBAAC,EAAD,CAAcC,YAAa,EAAKlB,MAAOmB,OAAQH,EAAMI,IAAKJ,EAAKK,c,GA3C9FC,IAAMC,WAoDvBC,E,mLAESC,GAAK,IAAD,OACX,OAAOA,EAAIV,KAAI,SAACW,GAAD,OAAU,wBAAIN,IAAK,EAAKrB,MAAMqB,IAAMM,EAAKC,YAAaD,Q,kCAI7DD,GACR,GAAGA,IAAQX,KAAKf,MAAMmB,YAAYjB,MAAM2B,MAAK,SAACX,GAAD,OAAOA,EAAE,KAAOQ,EAAI,MAAI,CACjE,IAAII,EAASf,KAAKf,MAAMmB,YAAYhB,cAAcuB,EAAI,IACtD,OAAO,wBAAIK,QAASD,EAAO,oBAAyBA,EAAO,iB,+BAM/D,OACI,kBAAC,IAAME,SAAP,KACK,wBAAIX,IAAKN,KAAKf,MAAMqB,KAAMN,KAAKkB,WAAWlB,KAAKf,MAAMoB,QACjDL,KAAKmB,YAAYnB,KAAKf,MAAMoB,c,GAnBtBG,IAAMC,WA4BlBW,EA5Ff,WACI,OACI,yBAAKC,UAAU,OACX,4BAAQA,UAAU,cAEd,kBAAC,EAAD,SCIIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,MAAK,SAAA4C,GACjCA,EAAaC,iB","file":"js/main.4c6f9f8c.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n            {/*<img src={logo} className=\"App-logo\" alt=\"logo\" />*/}\n                <ListElem />\n            </header>\n        </div>\n    );\n}\n\n\nclass ListElem extends React.Component {\n    componentDidMount() {\n    fetch(\"/api/getList\"\n    )\n        .then(res => res.json())\n        .then(\n        (result) => {\n            this.setState({\n            isLoaded: true,\n            items: result.items,\n            donationsPDay: result.donations_per_day\n            });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n            this.setState({\n                isLoaded: true,\n                error\n            });\n        }\n      )\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: [[3093, \"15.03.2020\", \"14:43:56\", \"tchurovtim@gmail.com\", \"Санкт-Петербург\", \"200\"], [2, \"15.03.2020\", \"14:43:56\", \"tchurovtim@gmail.com\", \"Санкт-Петербург\", \"200\"]],\n            // [[\"initial item\"]]\n            donationsPDay: {\"15.03.2020\": {\"donations_that_day\": 2,\n                                           \"sum_that_day\": 400}\n            }\n        }\n    }\n\n\n    render() {\n        console.log(this.state.items)\n        return (\n            <div>\n                <table>\n                {\n                    this.state.items.map((item, i) => <DonationElem parentState={this.state} string={item} key={item.id} />)\n                }\n                </table>\n            </div>\n        );\n    }\n}\n\n\nclass DonationElem extends React.Component {\n\n    displayRow(row){\n        return row.map((cell) => <td key={this.props.key + cell.toString()}>{cell}</td>)\n    }\n\n\n    displaySpan(row){\n        if(row === this.props.parentState.items.find((i) => i[1] === row[1])){\n            let day_don= this.props.parentState.donationsPDay[row[1]]\n            return <td rowSpan={day_don[\"donations_that_day\"]}>{day_don[\"sum_that_day\"]}</td>;\n        }\n    }\n\n\n    render(){\n        return(\n            <React.Fragment>\n                {<tr key={this.props.key}>{this.displayRow(this.props.string)}\n                    {this.displaySpan(this.props.string)}\n                </tr>}\n            </React.Fragment>\n        );\n    }\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}